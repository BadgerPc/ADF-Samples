package gr.dim.stas.model.entities;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Aug 29 21:48:49 EEST 2010
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CountriesImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    @Override
    public void afterCommit(TransactionEvent transactionEvent) {
        super.afterCommit(transactionEvent);
        
    }

    @Override
    public boolean isAttributeUpdateable(int i) {
     
        return super.isAttributeUpdateable(i);
   
    }

    @Override
    public void beforeCommit(TransactionEvent transactionEvent) {
       
        super.beforeCommit(transactionEvent);
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CountryId {
            public Object get(CountriesImpl obj) {
                return obj.getCountryId();
            }

            public void put(CountriesImpl obj, Object value) {
                obj.setCountryId((String)value);
            }
        }
        ,
        CountryName {
            public Object get(CountriesImpl obj) {
                return obj.getCountryName();
            }

            public void put(CountriesImpl obj, Object value) {
                obj.setCountryName((String)value);
            }
        }
        ,
        RegionId {
            public Object get(CountriesImpl obj) {
                return obj.getRegionId();
            }

            public void put(CountriesImpl obj, Object value) {
                obj.setRegionId((Number)value);
            }
        }
        ,
        editable {
            public Object get(CountriesImpl obj) {
                return obj.geteditable();
            }

            public void put(CountriesImpl obj, Object value) {
                obj.seteditable((Boolean)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CountriesImpl object);

        public abstract void put(CountriesImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int COUNTRYID = AttributesEnum.CountryId.index();
    public static final int COUNTRYNAME = AttributesEnum.CountryName.index();
    public static final int REGIONID = AttributesEnum.RegionId.index();
    public static final int EDITABLE = AttributesEnum.editable.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CountriesImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("gr.dim.stas.model.entities.Countries");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for CountryId, using the alias name CountryId.
     * @return the CountryId
     */
    public String getCountryId() {
        return (String)getAttributeInternal(COUNTRYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CountryId.
     * @param value value to set the CountryId
     */
    public void setCountryId(String value) {
        setAttributeInternal(COUNTRYID, value);
    }

    /**
     * Gets the attribute value for CountryName, using the alias name CountryName.
     * @return the CountryName
     */
    public String getCountryName() {
        return (String)getAttributeInternal(COUNTRYNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for CountryName.
     * @param value value to set the CountryName
     */
    public void setCountryName(String value) {
        setAttributeInternal(COUNTRYNAME, value);
    }

    /**
     * Gets the attribute value for RegionId, using the alias name RegionId.
     * @return the RegionId
     */
    public Number getRegionId() {
        return (Number)getAttributeInternal(REGIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RegionId.
     * @param value value to set the RegionId
     */
    public void setRegionId(Number value) {
        setAttributeInternal(REGIONID, value);
    }

    /**
     * Gets the attribute value for editable, using the alias name editable.
     * @return the editable
     */
    public Boolean geteditable() {
        return (Boolean)getAttributeInternal(EDITABLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for editable.
     * @param value value to set the editable
     */
    public void seteditable(Boolean value) {
        setAttributeInternal(EDITABLE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param countryId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String countryId) {
        return new Key(new Object[]{countryId});
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        this.seteditable(false);
        super.doDML(operation, e);
    }
}

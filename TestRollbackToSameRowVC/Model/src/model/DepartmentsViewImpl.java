package model;

import oracle.jbo.AttributeDef;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaItem;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 16 10:00:49 EEST 2009
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DepartmentsViewImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public DepartmentsViewImpl() {
    }

    Key currentRowKey;
    int firstRowInRange;
    int currentRowIndexInRange;
    ViewCriteriaRow vcRow;

    public void beforeRollback(TransactionEvent TransactionEvent) {
        System.out.println("Before..."+this.getName());
        if (isExecuted()) {
            //add in view criteria current row PK in order not to loose current row
            MakeViewCriteriaApplyAlsoForCurrentRow();
            ViewRowImpl currentRow = (ViewRowImpl)getCurrentRow();
            if (currentRow != null) {
                byte newRowState = currentRow.getNewRowState();
                if (newRowState != Row.STATUS_INITIALIZED &&
                    newRowState != Row.STATUS_NEW) {
                    currentRowKey = currentRow.getKey();
//                    firstRowInRange = getRangeStart();
//                    int rangeIndexOfCurrentRow = getRangeIndexOf(currentRow);
//                    currentRowIndexInRange = rangeIndexOfCurrentRow;
                }
            }
        }
        super.beforeRollback(TransactionEvent);
    }
    public void afterRollback(TransactionEvent TransactionEvent) {
      System.out.println("After.."+this.getName());
        super.afterRollback(TransactionEvent);
        System.out.println("After RollBack is finished..");

    }

    /**
     * Creates a View criteria row for the primary key of the current row
     * It is used in before and afterRollback so that when criteria exists the current row will not be lost.
     * @return
     */
    private void MakeViewCriteriaApplyAlsoForCurrentRow() {
        if (this.getApplyViewCriteriaNames() != null &&
            this.getCurrentRow() != null && this.getEntityDefCount() > 0) {
            ViewCriteria vc =
                this.getViewCriteria(this.getApplyViewCriteriaNames()[0]);

            AttributeDef[] keyAttr = this.getKeyAttributeDefs();
            vcRow = vc.createViewCriteriaRow();
            for (int i = 0; i < keyAttr.length; i++) {
                ViewCriteriaItem pkItem =
                    vcRow.ensureCriteriaItem(keyAttr[i].getName());
                pkItem.setOperator("=");
                pkItem.getValues().get(0).setValue(this.getCurrentRow().getAttribute(keyAttr[i].getName()));
            }
            vc.addRow(vcRow);
        }
    }

    @Override
    protected void executeQueryForCollection(Object object, Object[] object2,
                                             int i) {
        System.out.println("executing query for collection. ");
        super.executeQueryForCollection(object, object2, i);
      System.out.println("Execute Query is done.");
      System.out.println("about to set current row..");
      
      if (currentRowKey != null) {
      //          System.out.println("Executing query");
      //                  executeQuery();
      //          Key k = new Key(currentRowKey.getAttributeValues());
        System.out.println("find by key for key:  "+currentRowKey);
        
        
        Row[] found = findByKey(currentRowKey, 1);
      //          System.out.println("Found rows:  "+found.length);
      //          if (found != null && found.length == 1) {
            Row r =found[0];
      //                  getRow(k);
      //              System.out.println("First row has key: "+r.getKey().getKeyValues()[0]);
//            System.out.println("setting it as a current row.");
                //getRow(k);
            
      //              r.refresh(r.REFRESH_UNDO_CHANGES);
      //                    if (currentRowIndexInRange >= 0) {
      //                        scrollRangeTo(r, currentRowIndexInRange);
      //                    }
          
          
                setCurrentRow(r);
      //          }
      }
          currentRowKey = null;
      //Remove From criteria condition for Current row
      if (this.getApplyViewCriteriaNames() != null && vcRow != null) {
        ViewCriteria vc =
            this.getViewCriteria(this.getApplyViewCriteriaNames()[0]);
        vc.removeRow(vcRow);
        vcRow = null;
      }
      
    }


    @Override
    public void executeQuery() {
        System.out.println("About to execute Query...");
        super.executeQuery();
 
      
    }
}
